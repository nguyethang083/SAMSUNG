Thuật toán này giả định rằng đồ thị được biểu diễn bằng danh sách kề.
def DFS(graph, v, visited, disc, low, parent):
    children = 0
    visited[v] = True
    disc[v] = low[v] = time[0]
    time[0] += 1
    for i in graph[v]:
        if visited[i] == False :
            parent[i] = v
            children += 1
            DFS(graph, i, visited, disc, low, parent)
            low[v] = min(low[v], low[i])
            if low[i] > disc[v]:
                print ("%d %d" %(v,i))
        elif i != parent[v]:
            low[v] = min(low[v], disc[i])

def findBridges(graph, V):
    visited = [False] * (V)
    disc = [float("Inf")] * (V)
    low = [float("Inf")] * (V)
    parent = [-1] * (V)
    time[0] = 0
    for i in range(V):
        if visited[i] == False:
            DFS(graph, i, visited, disc, low, parent)

time = [0] # To keep track of time during DFS traversal

Thuật toán này hoạt động bằng cách thực hiện DFS của đồ thị đã cho và trong khi thực hiện như vậy, nó sẽ theo dõi thời gian khám phá và đỉnh thấp nhất có thể tiếp cận cho mỗi đỉnh. Nếu với bất kỳ đỉnh v nào, tồn tại một con u sao cho không có đỉnh nào trong cây con gốc tại u có cạnh sau tới một đỉnh được tìm ra trước v, thì cạnh giữa v và u là cầu.

Độ phức tạp về thời gian của thuật toán này là O(V+E), trong đó V là số đỉnh và E là số cạnh trong đồ thị, tuyến tính theo kích thước của đồ thị. Điều này là do mỗi đỉnh và mỗi cạnh được truy cập chính xác một lần trong quá trình thực hiện DFS.